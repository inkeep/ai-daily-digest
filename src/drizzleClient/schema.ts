import {
    pgTable,
    pgEnum,
    timestamp,
    text,
    boolean,
    jsonb,
    uuid,
    json,
    bigint,
    doublePrecision,
} from 'drizzle-orm/pg-core';

export const keyStatus = pgEnum('key_status', ['default', 'valid', 'invalid', 'expired']);
export const keyType = pgEnum('key_type', [
    'aead-ietf',
    'aead-det',
    'hmacsha512',
    'hmacsha256',
    'auth',
    'shorthash',
    'generichash',
    'kdf',
    'secretbox',
    'secretstream',
    'stream_xchacha20',
]);
export const chatType = pgEnum('chat_type', ['NEW_CHAT', 'CONTINUE_CHAT']);
export const factorType = pgEnum('factor_type', ['totp', 'webauthn']);
export const factorStatus = pgEnum('factor_status', ['unverified', 'verified']);
export const aalLevel = pgEnum('aal_level', ['aal1', 'aal2', 'aal3']);
export const codeChallengeMethod = pgEnum('code_challenge_method', ['s256', 'plain']);
export const featureSupportEnum = pgEnum('feature_support_enum', ['yes', 'no', 'n/a']);
export const qTypeEnum = pgEnum('q_type_enum', [
    'IS_X_SUPPORTED_3P',
    'MIGRATE_FROM_3P',
    'COMPARISON_TO_3P',
    'MIGRATE_FROM_1P',
    'IS_X_SUPPORTED_1P',
    'HOW_TO_1P',
    'WHAT_IS_1P',
    'TROUBLESHOOTING_1P',
    'ACCOUNT_ISSUES',
    'BILLING',
    'CONTACT_SUPPORT',
    'COMMUNITY_AND_EVENTS',
    'SALES_AND_UPSELLS',
    'PROSPECTING_AND_PRICING',
    'OTHER',
    'HOW_TO_3P',
    'HELP_IMPLEMENT_EXTENDED_1P',
    'TROUBLESHOOTING_3P',
]);
export const chatMode = pgEnum('chat_mode', ['EXPERT', 'TURBO']);
export const yesNoNaEnum = pgEnum('yes_no_na_enum', ['yes', 'no', 'n/a']);
export const equalityOp = pgEnum('equality_op', ['eq', 'neq', 'lt', 'lte', 'gt', 'gte', 'in']);
export const action = pgEnum('action', ['INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'ERROR']);
export const requestStatus = pgEnum('request_status', ['PENDING', 'SUCCESS', 'ERROR']);
export const sydneyEnvironment = pgEnum('sydney_environment', ['production', 'development']);

export const chatSessions = pgTable('chat_sessions', {
    id: uuid('id').defaultRandom().primaryKey().notNull(),
    createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull(),
    messages: json('messages').notNull(),
    metadata: json('metadata').notNull(),
    integrationId: text('integration_id').notNull(),
    environment: sydneyEnvironment('environment').default('development').notNull(),
});
export const messageDashboard = pgTable('message_dashboard', {
    messageId: uuid('message_id').defaultRandom().primaryKey().notNull(),
    createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull(),
    chatSessionId: uuid('chat_session_id').defaultRandom().notNull(),
    integrationId: text('integration_id').notNull(),
    organizationId: text('organization_id').notNull(),
    projectId: text('project_id').notNull(),
    question: text('question'),
    answer: text('answer'),
    hasDocumentationGap: boolean('has_documentation_gap').notNull(),
    isFeatureSupported: boolean('is_feature_supported').notNull(),
    onTopic: boolean('on_topic').notNull(),
    isClear: boolean('is_clear').notNull(),
    thumbsUp: boolean('thumbs_up').notNull(),
    thumbsDown: boolean('thumbs_down').notNull(),
    chatMode: chatMode('chat_mode').default('TURBO').notNull(),
    organizationName: text('organization_name').notNull(),
    integrationName: text('integration_name').notNull(),
    projectName: text('project_name').notNull(),
    citations: json('citations').array(),
    questionContext: text('question_context'),
    sessionGuidance: text('session_guidance'),
    sessionContext: text('session_context'),
    questionSummary: text('question_summary'),
    questionSubject: text('question_subject'),
    gapSummary: text('gap_summary'),
    firstPartyEntities: text('first_party_entities').array(),
    thirdPartyEntities: text('third_party_entities').array(),
    environment: sydneyEnvironment('environment').default('development').notNull(),
    tags: text('tags').default('{}').array(),
    chatType: chatType('chat_type').default('NEW_CHAT').notNull(),
    chatHistory: text('chat_history'),
    answerId: uuid('answer_id').defaultRandom().notNull(),
});
export const bigqueryInkeepEvents = pgTable('bigquery_inkeep_events', {
    uuid: uuid('uuid'),
    properties: json('properties'),
    propertiesInkeepChatSessionId: text('properties__inkeep__chat_session_id'),
    event: text('event'),
});
export const results = pgTable('results', {
    resultTimestamp: timestamp('result_timestamp', { mode: 'date' }).defaultNow(),
    questionId: text('question_id').notNull(),
    humanLanguage: text('human_language').notNull(),
    questionSummary: text('question_summary').notNull(),
    questionSubject: text('question_subject').notNull(),
    questionCategory: text('question_category').notNull(),
    questionIsInScope: boolean('question_is_in_scope').notNull(),
    questionIsUnclear: boolean('question_is_unclear').notNull(),
    firstPartyEntities: jsonb('first_party_entities').notNull(),
    thirdPartyEntities: jsonb('third_party_entities').notNull(),
    questionType: qTypeEnum('question_type').notNull(),
    hasDocumentationGap: yesNoNaEnum('has_documentation_gap').notNull(),
    isFeatureSupported: yesNoNaEnum('is_feature_supported').notNull(),
    gapsSummary: text('gaps_summary'),
    question: text('question').notNull(),
    answer: text('answer').notNull(),
    chatSessionId: text('chat_session_id').notNull(),
    orgAlias: text('org_alias').notNull(),
    orgId: text('org_id').notNull(),
    orgName: text('org_name').notNull(),
    integrationId: text('integration_id').notNull(),
    integrationName: text('integration_name').notNull(),
    projectId: text('project_id').notNull(),
    subjectName: text('subject_name').notNull(),
    projectDescription: text('project_description').notNull(),
    questionTimestamp: timestamp('question_timestamp', { mode: 'date' }).notNull(),
});
export const results2 = pgTable('results_2', {
    resultTimestamp: timestamp('result_timestamp', { mode: 'date' }).defaultNow(),
    questionId: text('question_id').notNull(),
    humanLanguage: text('human_language').notNull(),
    questionSummary: text('question_summary').notNull(),
    questionSubject: text('question_subject').notNull(),
    questionCategory: text('question_category').notNull(),
    questionIsInScope: boolean('question_is_in_scope').notNull(),
    questionIsUnclear: boolean('question_is_unclear').notNull(),
    firstPartyEntities: jsonb('first_party_entities').notNull(),
    thirdPartyEntities: jsonb('third_party_entities').notNull(),
    questionType: qTypeEnum('question_type').notNull(),
    hasDocumentationGap: yesNoNaEnum('has_documentation_gap').notNull(),
    isFeatureSupported: yesNoNaEnum('is_feature_supported').notNull(),
    gapsSummary: text('gaps_summary'),
    question: text('question').notNull(),
    answer: text('answer').notNull(),
    chatSessionId: text('chat_session_id').notNull(),
    orgAlias: text('org_alias').notNull(),
    orgId: text('org_id').notNull(),
    orgName: text('org_name').notNull(),
    integrationId: text('integration_id').notNull(),
    integrationName: text('integration_name').notNull(),
    projectId: text('project_id').notNull(),
    subjectName: text('subject_name').notNull(),
    projectDescription: text('project_description').notNull(),
    questionTimestamp: timestamp('question_timestamp', { mode: 'date' }).notNull(),
});
export const results3 = pgTable('results_3', {
    questionId: uuid('question_id').defaultRandom().primaryKey().notNull(),
    chatSessionId: uuid('chat_session_id').defaultRandom(),
    resultTimestamp: timestamp('result_timestamp', { withTimezone: true, mode: 'date' }),
    orgAlias: text('org_alias'),
    orgName: text('org_name'),
    orgId: text('org_id'),
    integrationName: text('integration_name'),
    integrationId: text('integration_id'),
    subjectName: text('subject_name'),
    projectId: text('project_id'),
    projectDescription: text('project_description'),
    question: text('question'),
    answer: text('answer'),
    // You can use { mode: "bigint" } if numbers are exceeding js number limitations
    questionIsInScope: bigint('question_is_in_scope', { mode: 'number' }),
    // You can use { mode: "bigint" } if numbers are exceeding js number limitations
    questionIsUnclear: bigint('question_is_unclear', { mode: 'number' }),
    // You can use { mode: "bigint" } if numbers are exceeding js number limitations
    isFeatureSupported: bigint('is_feature_supported', { mode: 'number' }),
    // You can use { mode: "bigint" } if numbers are exceeding js number limitations
    hasDocumentationGap: bigint('has_documentation_gap', { mode: 'number' }),
    questionSubject: text('question_subject').array(),
    questionType: text('question_type').array(),
    questionCategory: text('question_category').array(),
    questionSummary: text('question_summary').array(),
    firstPartyEntities: text('first_party_entities').array(),
    thirdPartyEntities: text('third_party_entities').array(),
    // You can use { mode: "bigint" } if numbers are exceeding js number limitations
    totalLabels: bigint('total_labels', { mode: 'number' }),
});
export const results4 = pgTable('results_4', {
    resultTimestamp: timestamp('result_timestamp', { mode: 'date' }).defaultNow(),
    questionId: text('question_id').notNull(),
    humanLanguage: text('human_language').notNull(),
    questionSummary: text('question_summary').notNull(),
    questionSubject: text('question_subject').notNull(),
    questionCategory: text('question_category').notNull(),
    questionIsInScope: boolean('question_is_in_scope').notNull(),
    questionIsUnclear: boolean('question_is_unclear').notNull(),
    firstPartyEntities: jsonb('first_party_entities').notNull(),
    thirdPartyEntities: jsonb('third_party_entities').notNull(),
    questionType: qTypeEnum('question_type').notNull(),
    hasDocumentationGap: yesNoNaEnum('has_documentation_gap').notNull(),
    isFeatureSupported: yesNoNaEnum('is_feature_supported').notNull(),
    gapsSummary: text('gaps_summary'),
    question: text('question').notNull(),
    answer: text('answer').notNull(),
    chatSessionId: text('chat_session_id').notNull(),
    orgAlias: text('org_alias').notNull(),
    orgId: text('org_id').notNull(),
    orgName: text('org_name').notNull(),
    integrationId: text('integration_id').notNull(),
    integrationName: text('integration_name').notNull(),
    projectId: text('project_id').notNull(),
    subjectName: text('subject_name').notNull(),
    projectDescription: text('project_description').notNull(),
    questionTimestamp: timestamp('question_timestamp', { mode: 'date' }).notNull(),
});
export const chatSessionsOld = pgTable('chat_sessions_old', {
    id: uuid('id').defaultRandom().primaryKey().notNull(),
    createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow(),
    messages: json('messages'),
    metadata: json('metadata'),
    integrationId: text('integration_id'),
    environment: sydneyEnvironment('environment').default('development'),
});
export const messages = pgTable('messages', {
    messageId: uuid('message_id').defaultRandom().primaryKey().notNull(),
    chatSessionId: uuid('chat_session_id').defaultRandom().notNull(),
    answerId: uuid('answer_id').defaultRandom().notNull(),
    integrationId: text('integration_id').notNull(),
    createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).notNull(),
    question: text('question'),
    questionContext: text('question_context'),
    answer: text('answer'),
    organizationId: text('organization_id').notNull(),
    projectId: text('project_id').notNull(),
    citations: json('citations').array(),
    thumbsUp: boolean('thumbs_up').notNull(),
    thumbsDown: boolean('thumbs_down').notNull(),
    environment: sydneyEnvironment('environment').default('development').notNull(),
    chatType: chatType('chat_type').default('NEW_CHAT').notNull(),
    chatHistory: text('chat_history'),
});
export const messageAnalytics = pgTable('message_analytics', {
    messageId: uuid('message_id').defaultRandom().primaryKey().notNull(),
    answerId: uuid('answer_id').defaultRandom().notNull(),
    hateSpeechScore: doublePrecision('hate_speech_score').notNull(),
    relevanceScore: doublePrecision('relevance_score').notNull(),
    answerableScore: doublePrecision('answerable_score').notNull(),
    clarityScore: doublePrecision('clarity_score').notNull(),
    supportedScore: doublePrecision('supported_score').notNull(),
    questionSummary: text('question_summary'),
    questionSubject: text('question_subject'),
    gapSummary: text('gap_summary'),
    firstPartyEntities: text('first_party_entities').array(),
    thirdPartyEntities: text('third_party_entities').array(),
});